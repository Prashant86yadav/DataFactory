{
	"name": "s4_util_Cn_to_Sf_Create_Or_Update",
	"properties": {
		"description": "Utility pipeline to create or update Salesforce objects ",
		"activities": [
			{
				"name": "Create or update salesforce objects",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Set runid",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.Configuration.entities",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "On object",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{item().entityName}' [target_entity];",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								}
							}
						},
						{
							"name": "If Create else Update",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Reset record skip status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@not(item().isUpdate)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Log - Update object records",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Update object records",
												"dependencyConditions": [
													"Completed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[logging].[create_sys_log]",
											"storedProcedureParameters": {
												"base64_data": {
													"value": {
														"value": "@base64(string(activity('Update object records').output))",
														"type": "Expression"
													},
													"type": "String"
												},
												"context": {
													"value": {
														"value": "@{pipeline().Pipeline} -> Update object records",
														"type": "Expression"
													},
													"type": "String"
												},
												"run_id": {
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"source_name": {
													"value": {
														"value": "canonical.@{item().entityName} (@{item().instanceName})",
														"type": "Expression"
													},
													"type": "String"
												},
												"system_name": {
													"value": {
														"value": "@pipeline().parameters.Configuration.sourceSystemName",
														"type": "Expression"
													},
													"type": "String"
												},
												"target_name": {
													"value": {
														"value": "@item().entityName",
														"type": "Expression"
													},
													"type": "String"
												},
												"type": {
													"value": {
														"value": "@if(equals(activity('Update object records').Status, 'Failed'), 'error', 'info')",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										}
									},
									{
										"name": "Update object records",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"additionalColumns": [
													{
														"name": "ETL_batch_id__c",
														"value": {
															"value": "@item().batchId",
															"type": "Expression"
														}
													}
												],
												"sqlReaderQuery": {
													"value": "@replace(item().canonicalQuery,'{replace_with_corr_id}',pipeline().parameters.CorrelationID)",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "SalesforceSink",
												"writeBatchSize": {
													"value": "@if(contains(pipeline().globalParameters.sfObjectBatchSize,item().entityName)\n\t, pipeline().globalParameters.sfObjectBatchSize[item().entityName]\n\t,pipeline().globalParameters.globalBulkApiBatchSize)",
													"type": "Expression"
												},
												"writeBehavior": "upsert",
												"externalIdFieldName": "Id",
												"ignoreNullValues": true
											},
											"enableStaging": false,
											"enableSkipIncompatibleRow": true
										}
									},
									{
										"name": "fetch updated records",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Update object records",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SalesforceSource",
												"additionalColumns": [
													{
														"name": "entity_name",
														"value": {
															"value": "@item().entityName",
															"type": "Expression"
														}
													},
													{
														"name": "instance_name",
														"value": {
															"value": "@item().instanceName",
															"type": "Expression"
														}
													},
													{
														"name": "operation",
														"value": {
															"value": "Update",
															"type": "Expression"
														}
													}
												],
												"query": {
													"value": "select Id, ETL_item_id__c, ETL_correlation_ID__c, ETL_batch_id__c from @{item().entityName} where ETL_correlation_ID__c = '@{pipeline().parameters.CorrelationID}' and ETL_batch_id__c = '@{item().batchId}'",
													"type": "Expression"
												},
												"readBehavior": "query"
											},
											"sink": {
												"type": "AzureSqlSink",
												"writeBehavior": "insert",
												"disableMetricsCollection": false
											},
											"enableStaging": false
										}
									},
									{
										"name": "Log - fetch updated records",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "fetch updated records",
												"dependencyConditions": [
													"Completed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[logging].[create_sys_log]",
											"storedProcedureParameters": {
												"base64_data": {
													"value": {
														"value": "@base64(string(activity('fetch updated records').output))",
														"type": "Expression"
													},
													"type": "String"
												},
												"context": {
													"value": {
														"value": "@{pipeline().Pipeline} -> fetch updated records",
														"type": "Expression"
													},
													"type": "String"
												},
												"run_id": {
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"source_name": {
													"value": {
														"value": "@item().entityName",
														"type": "Expression"
													},
													"type": "String"
												},
												"system_name": {
													"value": {
														"value": "@pipeline().parameters.Configuration.sourceSystemName",
														"type": "Expression"
													},
													"type": "String"
												},
												"target_name": {
													"value": {
														"value": "salesforce.@{item().entityName} (@{item().instanceName})",
														"type": "Expression"
													},
													"type": "String"
												},
												"type": {
													"value": {
														"value": "@if(equals(activity('fetch updated records').Status, 'Failed'), 'error', 'info')",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										}
									},
									{
										"name": "Set update record skip status",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Update object records",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "CoUsf_RecordsSkipped",
											"value": {
												"value": "@greater(activity('Update object records').output.rowsSkipped,0)",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set update log file path",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Update object records",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "CoUsf_LogFilePath",
											"value": {
												"value": "@activity('Update object records').output.logFilePath",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Log - Insert object records",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Insert object records",
												"dependencyConditions": [
													"Completed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[logging].[create_sys_log]",
											"storedProcedureParameters": {
												"base64_data": {
													"value": {
														"value": "@base64(string(activity('Insert object records').output))",
														"type": "Expression"
													},
													"type": "String"
												},
												"context": {
													"value": {
														"value": "@{pipeline().Pipeline} -> Insert object records",
														"type": "Expression"
													},
													"type": "String"
												},
												"run_id": {
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"source_name": {
													"value": {
														"value": "canonical.@{item().entityName} (@{item().instanceName})",
														"type": "Expression"
													},
													"type": "String"
												},
												"system_name": {
													"value": {
														"value": "@pipeline().parameters.Configuration.sourceSystemName",
														"type": "Expression"
													},
													"type": "String"
												},
												"target_name": {
													"value": {
														"value": "@item().entityName",
														"type": "Expression"
													},
													"type": "String"
												},
												"type": {
													"value": {
														"value": "@if(equals(activity('Insert object records').Status, 'Failed'), 'error', 'info')",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										}
									},
									{
										"name": "Insert object records",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"additionalColumns": [
													{
														"name": "ETL_batch_id__c",
														"value": {
															"value": "@item().batchId",
															"type": "Expression"
														}
													}
												],
												"sqlReaderQuery": {
													"value": "@replace(item().canonicalQuery,'{replace_with_corr_id}',pipeline().parameters.CorrelationID)",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "SalesforceSink",
												"writeBatchSize": {
													"value": "@if(contains(pipeline().globalParameters.sfObjectBatchSize,item().entityName)\n\t, pipeline().globalParameters.sfObjectBatchSize[item().entityName]\n\t,pipeline().globalParameters.globalBulkApiBatchSize)",
													"type": "Expression"
												},
												"writeBehavior": "insert",
												"ignoreNullValues": true
											},
											"enableStaging": false,
											"enableSkipIncompatibleRow": true
										}
									},
									{
										"name": "fetch salesforce ids",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Insert object records",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SalesforceSource",
												"additionalColumns": [
													{
														"name": "entity_name",
														"value": {
															"value": "@item().entityName",
															"type": "Expression"
														}
													},
													{
														"name": "instance_name",
														"value": {
															"value": "@item().instanceName",
															"type": "Expression"
														}
													},
													{
														"name": "operation",
														"value": {
															"value": "Create",
															"type": "Expression"
														}
													}
												],
												"query": {
													"value": "select Id, ETL_item_id__c, ETL_correlation_ID__c, ETL_batch_id__c from @{item().entityName} where ETL_correlation_ID__c = '@{pipeline().parameters.CorrelationID}' and ETL_batch_id__c = '@{item().batchId}'",
													"type": "Expression"
												},
												"readBehavior": "query"
											},
											"sink": {
												"type": "AzureSqlSink",
												"writeBehavior": "insert",
												"disableMetricsCollection": false
											},
											"enableStaging": false
										}
									},
									{
										"name": "Log - fetch salesforce ids",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "fetch salesforce ids",
												"dependencyConditions": [
													"Completed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[logging].[create_sys_log]",
											"storedProcedureParameters": {
												"base64_data": {
													"value": {
														"value": "@base64(string(activity('fetch salesforce ids').output))",
														"type": "Expression"
													},
													"type": "String"
												},
												"context": {
													"value": {
														"value": "@{pipeline().Pipeline} -> fetch salesforce ids",
														"type": "Expression"
													},
													"type": "String"
												},
												"run_id": {
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"source_name": {
													"value": {
														"value": "@item().entityName",
														"type": "Expression"
													},
													"type": "String"
												},
												"system_name": {
													"value": {
														"value": "@pipeline().parameters.Configuration.sourceSystemName",
														"type": "Expression"
													},
													"type": "String"
												},
												"target_name": {
													"value": {
														"value": "salesforce.@{item().entityName} (@{item().instanceName})",
														"type": "Expression"
													},
													"type": "String"
												},
												"type": {
													"value": {
														"value": "@if(equals(activity('fetch salesforce ids').Status, 'Failed'), 'error', 'info')",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										}
									},
									{
										"name": "update canonical with salesforce ids",
										"type": "Lookup",
										"dependsOn": [
											{
												"activity": "fetch salesforce ids",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "declare @@correlation_id uniqueidentifier = '@{pipeline().parameters.CorrelationID}';\ndeclare @@batch_id uniqueidentifier = '@{item().batchId}';\ndeclare @@entity_name nvarchar(80) = '@{item().entityName}';\ndeclare @@instance_name nvarchar(80) = '@{item().instanceName}';\n\nUPDATE cn \nset cn.Id = ic.salesforce_id\nfrom\n canonical.[@{item().entityName}] cn\n inner join salesforce.operations_completed ic on ic.cn_item_id = cn.dl_item_id \n\tand ic.correlation_id = cn.dl_correlation_id\n\tand ic.batch_id = @@batch_id\n WHERE cn.dl_correlation_id =  @@correlation_id AND cn.dl_instance_name = @@instance_name;\n\nselect @@rowcount [cn_records_updated], @@entity_name [entity_name], @@instance_name[instance_name];",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											}
										}
									},
									{
										"name": "Set insert record skip status",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "fetch salesforce ids",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "CoUsf_RecordsSkipped",
											"value": {
												"value": "@greater(activity('Insert object records').output.rowsSkipped,0)",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set insert log file path",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "fetch salesforce ids",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "CoUsf_LogFilePath",
											"value": {
												"value": "@activity('Insert object records').output.logFilePath",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Reset record skip status",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "On object",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "CoUsf_RecordsSkipped",
								"value": {
									"value": "@bool(0)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "If operations skipped",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "If Create else Update",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('CoUsf_RecordsSkipped')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "write failed operations",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "@replace(item().canonicalFailedQuery,'{replace_with_corr_id}',pipeline().parameters.CorrelationID)",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "AzureSqlSink",
												"writeBehavior": "insert",
												"disableMetricsCollection": false
											},
											"enableStaging": false
										}
									},
									{
										"name": "Update faulted records",
										"type": "Lookup",
										"dependsOn": [
											{
												"activity": "write failed operations",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "declare @@correlation_id uniqueidentifier = '@{pipeline().parameters.CorrelationID}';\ndeclare @@batch_id uniqueidentifier = '@{item().batchId}';\ndeclare @@entity_name nvarchar(80) = '@{item().entityName}';\ndeclare @@instance_name nvarchar(80) = '@{item().instanceName}';\nUPDATE ic SET ic.[status] = 'Faulted' FROM salesforce.operations_completed ic inner join canonical.[@{item().entityName}] cn on cn.dl_item_id = ic.cn_item_id WHERE cn.dl_stg_item_id in (select distinct s.stg_item_id from salesforce.operations_failed s where s.correlation_id = @@correlation_id and s.[batch_id] = @@batch_id) AND ic.correlation_id = @@correlation_id;\ndeclare @@entity_records_updated integer = @@rowcount;\nUPDATE stg.file_data SET [status] = 'Faulted' WHERE item_id in (select distinct s.stg_item_id from salesforce.operations_failed s where s.correlation_id = @@correlation_id and s.[batch_id] = @@batch_id) and correlation_id = @@correlation_id;\nselect @@rowcount [stg_records_updated], @@entity_records_updated[cn_records_updated], @@entity_name[entity_name], @@instance_name[instance_name];",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											}
										}
									},
									{
										"name": "Ingest logs - Insert or Update records",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"additionalColumns": [
													{
														"name": "correlation_id",
														"value": {
															"value": "@pipeline().parameters.CorrelationID",
															"type": "Expression"
														}
													},
													{
														"name": "entity_name",
														"value": {
															"value": "@item().entityName",
															"type": "Expression"
														}
													},
													{
														"name": "activity_name",
														"value": {
															"value": "@if(item().isUpdate,'Update object records','Insert object records')",
															"type": "Expression"
														}
													},
													{
														"name": "instance_name",
														"value": {
															"value": "@item().instanceName",
															"type": "Expression"
														}
													}
												],
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": false,
													"wildcardFolderPath": {
														"value": "@variables('CoUsf_LogFilePath')",
														"type": "Expression"
													},
													"wildcardFileName": "*.txt",
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "AzureSqlSink",
												"writeBehavior": "insert"
											},
											"enableStaging": false
										}
									},
									{
										"name": "Log - write failed operations",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "write failed operations",
												"dependencyConditions": [
													"Completed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[logging].[create_sys_log]",
											"storedProcedureParameters": {
												"base64_data": {
													"value": {
														"value": "@base64(string(activity('write failed operations').output))",
														"type": "Expression"
													},
													"type": "String"
												},
												"context": {
													"value": {
														"value": "@{pipeline().Pipeline} -> write failed @{if(item().isUpdate,'updates','inserts')}",
														"type": "Expression"
													},
													"type": "String"
												},
												"run_id": {
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"source_name": {
													"value": {
														"value": "canonical.@{item().entityName} (@{item().instanceName})",
														"type": "Expression"
													},
													"type": "String"
												},
												"system_name": {
													"value": {
														"value": "@pipeline().parameters.Configuration.sourceSystemName",
														"type": "Expression"
													},
													"type": "String"
												},
												"target_name": {
													"value": {
														"value": "@item().entityName",
														"type": "Expression"
													},
													"type": "String"
												},
												"type": {
													"value": {
														"value": "@if(equals(activity('write failed operations').Status, 'Failed'), 'error', 'warn')",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										}
									},
									{
										"name": "Log - Update faulted records",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Update faulted records",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[logging].[create_sys_log]",
											"storedProcedureParameters": {
												"base64_data": {
													"value": {
														"value": "@base64(string(activity('Update faulted records').output))",
														"type": "Expression"
													},
													"type": "String"
												},
												"context": {
													"value": {
														"value": "@{pipeline().Pipeline} -> Update faulted records",
														"type": "Expression"
													},
													"type": "String"
												},
												"run_id": {
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"source_name": {
													"value": null,
													"type": "String"
												},
												"system_name": {
													"value": {
														"value": "@pipeline().parameters.Configuration.sourceSystemName",
														"type": "Expression"
													},
													"type": "String"
												},
												"target_name": {
													"value": null,
													"type": "String"
												},
												"type": {
													"value": {
														"value": "@if(equals(activity('Update faulted records').Status, 'Failed'), 'error', 'warn')",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Set runid",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "RunId",
					"value": {
						"value": "@pipeline().parameters.ParentRunID",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"Configuration": {
				"type": "object"
			},
			"CorrelationID": {
				"type": "string"
			},
			"ParentRunID": {
				"type": "string"
			}
		},
		"variables": {
			"salesforceLoggingPath": {
				"type": "String",
				"defaultValue": "copyactivity-logs/cn-to-sf"
			},
			"stagingContainerName": {
				"type": "String",
				"defaultValue": "data-loader-stg"
			},
			"CoUsf_RecordsSkipped": {
				"type": "Boolean"
			},
			"CoUsf_LogFilePath": {
				"type": "String"
			},
			"RunId": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Core Bulk Data Load"
		},
		"annotations": []
	}
}