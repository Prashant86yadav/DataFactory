{
	"name": "pl_rawsvg_rawCheckin",
	"properties": {
		"description": "checkin pipeline",
		"activities": [
			{
				"name": "Set svgExtractFrom",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GET TGT HighWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "svgExtractFrom",
					"value": {
						"value": "@if(\n  less(\n    pipeline().parameters.RerunFromDate\n  , formatDateTime(replace(activity('GET TGT HighWaterMark').output.runOutput,' ','T'), 'yyyy-MM-dd HH:mm:ss.fff')\n  )\n  , pipeline().parameters.RerunFromDate\n  , formatDateTime(replace(activity('GET TGT HighWaterMark').output.runOutput,' ','T'), 'yyyy-MM-dd HH:mm:ss.fff')\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set svgCappedExtractTo",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup SRC HighWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "svgCappedExtractTo",
					"value": {
						"value": "@if(\n  less(\n    pipeline().parameters.RerunToDate\n  , replace(replace(\n    activity('Lookup SRC HighWaterMark').output.firstRow.newHighWaterMark\n    , 'T', ' ')\n    , 'Z','')\n  )\n  , pipeline().parameters.RerunToDate\n  , replace(replace(\n    activity('Lookup SRC HighWaterMark').output.firstRow.newHighWaterMark\n    , 'T', ' ')\n    , 'Z','')\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Lookup SRC HighWaterMark",
				"description": "Lookup the highest dated row. This will be used as a cap in the COPY command so that we get a consistent view of the table as it is copied. Anything beyond this date is in a state of flux and could be changing as we read.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "GoogleBigQuerySource",
						"query": {
							"value": "SELECT MAX(item_created_ts) AS newHighWaterMark\nFROM `@{pipeline().globalParameters.svgProjectName}.@{pipeline().globalParameters.svgSchemaName}.@{pipeline().globalParameters.svgCheckinName}` ",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Until1",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Set svgCappedExtractTo",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set svgExtractFrom",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@or(\n  greaterOrEquals(variables('svgExtractFrom'), variables('svgCappedExtractTo'))\n,  variables('FailFlag')\n)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Set svgExtractTo",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "svgExtractTo",
								"value": {
									"value": "@substring(replace(replace(\n  addhours(\n    concat(replace(variables('svgExtractFrom'), ' ', 'T'), 'Z')\n  , pipeline().parameters.HoursToExtract)\n, 'T',' '), 'Z',''), 0, 23)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "RollFwd extractFrom",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "If Data Exists to Extract",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "svgExtractFrom",
								"value": {
									"value": "@variables('svgExtractTo')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set failure",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "If Data Exists to Extract",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "FailFlag",
								"value": true
							}
						},
						{
							"name": "If ExtractTo Exceeds Cap",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Set svgExtractTo",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(\n  variables('svgExtractTo')\n, variables('svgCappedExtractTo')\n)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Cap ExtractTo",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "svgExtractTo",
											"value": {
												"value": "@variables('svgCappedExtractTo')",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "If Data Exists to Extract",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "If ExtractTo Exceeds Cap",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(variables('svgExtractTo'), variables('svgExtractFrom'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Set partitionYEAR",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "partitionYEAR",
											"value": {
												"value": "@{formatDateTime(replace(variables('svgExtractTo'),' ','T'), 'yyyy')}",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set partitionMONTH",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "partitionMONTH",
											"value": {
												"value": "@{formatDateTime(replace(variables('svgExtractTo'),' ','T'), 'MM')}",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set partitionFROM",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "partitionFROM",
											"value": {
												"value": "@{formatDateTime(replace(variables('svgExtractFrom'),' ','T'), 'yyyyMMddHHmmssfff')}",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set partitionTO",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "partitionTO",
											"value": {
												"value": "@{formatDateTime(replace(variables('svgExtractTo'),' ','T'), 'yyyyMMddHHmmssfff')}",
												"type": "Expression"
											}
										}
									},
									{
										"name": "LAND rawCheckin",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "CREATE Partition",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "GoogleBigQuerySource",
												"query": {
													"value": "SELECT contact_number_hashedb64,\n\treplace(location_id, '\\\\','\\\\\\\\') location_id,\n\tcheckin_ts,\n\tdevice_type,\n\tcheckin_ts AS item_created_ts,\n\tevent_id,\n\tcheckin_type,\n\tnumber_of_guests\nFROM `@{pipeline().globalParameters.svgProjectName}.@{pipeline().globalParameters.svgSchemaName}.@{pipeline().globalParameters.svgCheckinName}` \nWHERE item_created_ts IS NULL\nAND '@{variables('svgExtractFrom')}' < '@{pipeline().globalParameters.svgNullItemCreatedDateCutoff}'\nAND checkin_ts >= '2020-11-29 13:00:00'\nAND checkin_ts < '@{pipeline().globalParameters.svgNullItemCreatedDateCutoff}'\nAND checkin_ts > '@{variables('svgExtractFrom')}'\nAND checkin_ts <= '@{variables('svgExtractTo')}'\nUNION ALL\nSELECT contact_number_hashedb64,\n\treplace(location_id, '\\\\','\\\\\\\\') location_id,\n\tcheckin_ts,\n\tdevice_type,\n\titem_created_ts,\n\tevent_id,\n\tcheckin_type,\n\tnumber_of_guests\nFROM `@{pipeline().globalParameters.svgProjectName}.@{pipeline().globalParameters.svgSchemaName}.@{pipeline().globalParameters.svgCheckinName}` \nWHERE item_created_ts IS NOT NULL\nAND '@{variables('svgExtractTo')}' >= '@{pipeline().globalParameters.svgNullItemCreatedDateCutoff}'\nAND checkin_ts >= '2020-11-29 13:00:00'\nAND item_created_ts >= '@{pipeline().globalParameters.svgNullItemCreatedDateCutoff}'\nAND item_created_ts > '@{variables('svgExtractFrom')}'\nAND item_created_ts <= '@{variables('svgExtractTo')}'",
													"type": "Expression"
												}
											},
											"sink": {
												"type": "DelimitedTextSink",
												"storeSettings": {
													"type": "AzureBlobStorageWriteSettings",
													"metadata": [
														{
															"name": "FROM",
															"value": {
																"value": "@variables('partitionFROM')",
																"type": "Expression"
															}
														},
														{
															"name": "TO",
															"value": {
																"value": "@variables('partitionTO')",
																"type": "Expression"
															}
														}
													]
												},
												"formatSettings": {
													"type": "DelimitedTextWriteSettings",
													"maxRowsPerFile": 1000000,
													"fileNamePrefix": {
														"value": "rawCheckin_@{pipeline().RunId}",
														"type": "Expression"
													},
													"quoteAllText": true,
													"fileExtension": ".csv"
												},
												"writeBehavior": "insert"
											},
											"enableStaging": false
										}
									},
									{
										"name": "CREATE Partition",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "Set partitionYEAR",
												"dependencyConditions": [
													"Succeeded"
												]
											},
											{
												"activity": "Set partitionMONTH",
												"dependencyConditions": [
													"Succeeded"
												]
											},
											{
												"activity": "Set partitionFROM",
												"dependencyConditions": [
													"Succeeded"
												]
											},
											{
												"activity": "Set partitionTO",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": "/Shared/ETL/nb_rawdvr_addPartition",
											"baseParameters": {
												"tableName": {
													"value": "rawsvg.rawCheckin",
													"type": "Expression"
												},
												"paramYEAR": {
													"value": "@variables('partitionYEAR')",
													"type": "Expression"
												},
												"paramMONTH": {
													"value": "@variables('partitionMONTH')",
													"type": "Expression"
												},
												"paramFROM": {
													"value": "@variables('partitionFROM')",
													"type": "Expression"
												},
												"paramTO": {
													"value": "@variables('partitionTO')",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			},
			{
				"name": "GET TGT HighWaterMark",
				"type": "DatabricksNotebook",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Shared/ETL/nb_rawdvr_getHighWaterMark",
					"baseParameters": {
						"tableName": {
							"value": "rawsvg.rawCheckin",
							"type": "Expression"
						},
						"defaultHWM": "2020-11-30 00:00:00.000"
					}
				}
			}
		],
		"parameters": {
			"RerunFromDate": {
				"type": "string",
				"defaultValue": "2199-12-31 00:00:00.000"
			},
			"RerunToDate": {
				"type": "string",
				"defaultValue": "2199-12-31 00:00:00.000"
			},
			"HoursToExtract": {
				"type": "int",
				"defaultValue": 168
			}
		},
		"variables": {
			"svgExtractFrom": {
				"type": "String",
				"defaultValue": "2199-12-31 00:00:00"
			},
			"svgCappedExtractTo": {
				"type": "String",
				"defaultValue": "2199-12-31 00:00:00"
			},
			"svgExtractTo": {
				"type": "String",
				"defaultValue": "Do not update"
			},
			"FailFlag": {
				"type": "Boolean"
			},
			"partitionYEAR": {
				"type": "String"
			},
			"partitionMONTH": {
				"type": "String"
			},
			"partitionFROM": {
				"type": "String"
			},
			"partitionTO": {
				"type": "String"
			}
		},
		"folder": {
			"name": "DVR Product Dashboard/10 Raw Data Lake"
		},
		"annotations": [],
		"lastPublishTime": "2022-03-30T01:55:57Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}