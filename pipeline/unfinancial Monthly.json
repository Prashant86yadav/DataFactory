{
	"name": "unfinancial Monthly",
	"properties": {
		"activities": [
			{
				"name": "update dashboard_category Unfinancial",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set end of the month as Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "\n------Creating Data For unfinancial Monthly  Version 0.2---------------\n\n-- A is the the Account table Output while B is the Account ID's we get from our TVF \n--TVF [membership].[members_Lost_A]  : It will give how many members did we loose in current month, takes date as Parameter \n-- Question : if it takes timestamp till 11:59:00:00 or just the day thing  ?\n\n--We create EOM from the created date so even is created date is \"2024-05-31 23:59:00.000 \" when we do reporting and run scripts, this entry will have EOM as 2024-05-31, hence covered is previous month calculation\n\n--30 columns in CTE \nWITH CTE AS (\n    SELECT \n\tcategory='Unfinancial Monthly',   --- categorise the Data as LosT \n\tB.Unfinancial AS AccountID  , --From TVF we get account id's which were lost in that month \n\tB.DateStart as MonthDate, --TVF are based on EOM dates, it will always have EOM date coz of ALL months CTE logic used in TVF \n\n\n\t--If we do not see MemberGrade in Account table we try to find it from contract table, else use whatever we have in Account table \n     CASE \n\t WHEN A.MemberGrade__c  IS NULL \n\t  Then (select  C.Grade__c from [salesforce].[Contract] C  where C.accountid =B.Unfinancial and  c.currentmembership__c =1)\n\t  Else A.MemberGrade__c \n\t END \n\t AS [MemberGrade], \n\n\t --If we do not see BillingGrade__c in Account table we try to find it from contract table, else use whatever we have in Account table \n      CASE \n\t  WHEN A.BillingGrade__c  IS NULL \n\t\tTHEN   (select  C.MemberBillingGrade__c from [salesforce].[Contract] C  where C.accountid =B.Unfinancial and  c.currentmembership__c =1)\n\t\tWHEN A.BillingGrade__c IN ( '14 - Student - PYear' ,  '14 – Student – PYear' , '16 - Student - PYear',  '17 - Student - PYear' , '18 - Student - PYear' ) \n\t\tThen  '14 - Student - PYear'         \n\t  ELSE  A.BillingGrade__c \n\t\tEND \n\t\tAS [BillingGrade], \n\n       --We create BranchGroup from Branch Infromation avaialble in Account table  \n\t\tCASE            \n\t\twhen A.branch__c ='Canberra'  then  'CANB'          \n\t\twhen A.branch__c ='New South Wales'  then  'NSW'          \n\t\twhen A.branch__c ='Northern Territory' then  'NT'          \n\t\twhen A.branch__c ='Overseas' then  'os'          \n\t\twhen A.branch__c IN  ('Queensland' , 'South Pacific Overseas')  then  'QLD'          \n\t\twhen A.branch__c ='South Australia' then  'SA'          \n\t\twhen A.branch__c ='Tasmania' then  'TAS'          \n\t\twhen A.branch__c ='Victoria' then  'VIC'          \n\t\twhen A.branch__c ='Western Australia' then  'WA'          \n\t\twhen A.branch__C is NULL and HiddenUserLocationState__c ='Overseas' then 'os'          \n\t\tELSE null          \n       END as [BranchGroup]  , \n\t\t\n\n\t\t-- Codifying the gender from Account table & assessment Table where ever Present \n\t\tCASE           \n\t\tWhen A.Gender__c in ('F', 'Female' )  or  A.Title__c  in ('Miss', 'Mrs', 'Ms')  Then 'Female'          \n\t\tWhen A.Gender__c in ('MALE', 'M')  or  A.Title__c  in ('Mr.', 'Sir', 'Ms')   then 'Male'          \n\t\tWhen A.Gender__c is NULL then (select DISTINCT(c.Applicant_Title__c) from  [dbo].[assessment] c  where B.Unfinancial = c.applicantname__C )          \n\t\telse A.Gender__c          \n\t\tend as [Gender]    , \n\n\t\t\n\t\t\n\t\t--Codifying certification level into [certificationGroup] from Account object \n\t\tCASE          \n\t\twhen  CertificationLevel__c in ('CP','CP Lapsed') then 'CP'          \n\t\twhen CertificationLevel__c in ('CT','CT Lapsed') then 'CT'          \n\t\twhen CertificationLevel__c in ('Not Certified') then 'Not Certified'          \n\t\telse NULL          \n\t\tend as [certificationGroup],\n\t\t\n\t\t---Fetching Attributes from Account table \n\n\t\tCertificationLevel__c as  [CertificationLevel] ,           \n\t\t A.PPP__c as PPP ,              \n\t\t A.id as [AccountObjID],           \n\t\t A.email__c as [Email],           \n\t\t A.type as [AccountType],          \n\t\t A.MembershipNumber__c as [MembershipNumber],    \n\t\t A.DateOfBirth__c, \n\t\tA.Days_since_Current_Membership_Expiry__c, \n\t\tA.HiddenFullName__c as [PersonFullName],          \n\t\tA.CurrentMembershipExpiry__c as [CurrentMembershipExpiry],          \n\t\tA.PersonAccountJoinedDate__c as [JoinedDate],  \n\t\tA.branch__c as [Branch],           \n\t\tA.Geography__c as [Geography],           \n\t\tA.[ShippingCountry] as [WorkCountry],           \n\t\tA.[BillingCountry] as [HomeCountry],           \n\t\tA.Former_Billing_Grade1__c  ,           \n\t\t\n\n\t\t---Fetching Membership_Status of the account from Account object and if not present doing a lookup in Contract table \n\t   CASE \n\t   WHEN A.Membership_Status__c  IS NULL \n\t   Then (select  C.Status from [salesforce].[Contract] C  where C.accountid =B.Unfinancial and  c.currentmembership__c =1)\n\t   ELSE A.Membership_Status__c\n\t   END \n\t   as Membership_Status,       \n\t\t\n\n\t--Concanating Billing Grade & Former Billing Grades into BillingGradeConcat , To be used in next CTE \n\t\tCONCAT(A.BillingGrade__c, '_',A.Former_Billing_Grade1__c) as BillingGradeConcat ,  \n\n\n\n\t\tCONVERT(DATE, DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)) AS ExtractDate,  --it will return the First Day of the month on any day , '2024-06-01'\n\t\t\n\t\t LEFT(DATENAME(MONTH, GETDATE()), 3) + '-' + RIGHT(CONVERT(VARCHAR(4), YEAR(GETDATE())), 2) AS [FYYear],  --It will return month & Year , exmaple Jun-24 \n\n\n\t\t--Case statement will look for financial year \n\t    CASE\n\t\tWHEN CONVERT(DATE, DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0))  between '2024-07-01' and '2025-06-30'\n\t\tTHEN 'FY 25'\n\t\tWHEN CONVERT(DATE, DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0))  between '2023-07-01' and '2024-06-30'\n\t\tTHEN 'FY 24'\n\t\t ELSE NULL \n\t\tEND \n\t\tas [FY],\t\n\t\t\n\t\tLEFT(LEFT(DATENAME(MONTH, GETDATE()), 3) + '-' + RIGHT(CONVERT(VARCHAR(4), YEAR(GETDATE())), 2),3)   AS [Month]     --it will return the current month \n\t  \t  \n\t\t  --update the Function here \n\t      \tFROM  [membership].[members_unfinancial_A]('@{variables('date')}') B\n\t\t    --FROM  [membership].[members_unfinancial_A]('2024-06-30') B\n\t\t\tINNER JOIN [salesforce].[Account] A \n\t\t\tON B.Unfinancial = A.id\n)\n,\n-----Updating the Billing Grade Values -------\n\n\nCTE1 \nAS\n(\nselect \ncategory,\nAccountID,\nMonthDate,\n[MemberGrade]\t,\nBranchGroup,\t\nGender\t,\ncertificationGroup\t,\nCertificationLevel,\n[PPP],\nAccountObjID,\n[Email]\t,\nAccountType\t,\nMembershipNumber,\n DateOfBirth__c\t,\nDays_since_Current_Membership_Expiry__c,\nPersonFullName\t,\nCurrentMembershipExpiry\t,\nJoinedDate\t,\nBranch\t,\nGeography,\nWorkCountry,\nHomeCountry\t,\nFormer_Billing_Grade1__c\t,\nMembership_Status,\nBillingGradeConcat,\nExtractDate\t,\n[FYYear]\t,\nFY\t,\nMonth, \n\n--Updating Billing Grade based on Previous Billing Grades \nCASE     \n   WHEN   Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30  and billinggradeconcat ='3 - Full Fee_2 - PPP Full fee' \n   Then  '2 - PPP Full fee'    \n   WHEN Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and  billinggradeconcat ='3 - Full Fee_1 - Continuing'\n   Then   '1 - Continuing'    \n   WHEN Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and  billinggradeconcat ='7 - Graduate - 2nd Year_4 - Graduate - 1st Year' \n   Then    '4 - Graduate - 1st Year'    \n   WHEN   Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and   billinggradeconcat ='3 - Full Fee_7 - Graduate - 2nd Year' \n   Then   '7 - Graduate - 2nd Year'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and    billinggradeconcat ='4 - Graduate - 1st Year_10 - Student - PPP' \n   Then  '10 - Student - PPP'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and    billinggradeconcat ='4 - Graduate - 1st Year_11 - Student' \n   Then   '11 - Student'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and   billinggradeconcat ='3 - Full Fee_12 - Complimentary' \n   Then  '12 - Complimentary'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and    billinggradeconcat ='3 - Full Fee 13 - Honoured' \n   Then  '13 - Honoured'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and   billinggradeconcat ='4 - Graduate - 1st Year_14 - Student - PYear'  \n   Then  '14 - Student - PYear'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and    billinggradeconcat ='4 - Graduate - 1st Year_15 - Student - ACSF' \n   Then   '15 - Student - ACSF'    \n   WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and    billinggradeconcat ='3 - Full Fee_16 - Unemployed / On Hiatus' \n   Then  '16 - Unemployed / On Hiatus'    \n  WHEN  Former_Billing_Grade1__c  IS  NOT NULL  and Days_since_Current_Membership_Expiry__c   >= -30 and    billinggradeconcat ='18 - Digital Subscriber 20 - Skills Applicant' \n  Then  '20 - Skills Applicant'    \n  ELSE [BillingGrade]\n   END    \n   AS [BillingGrade]\n\n\nfrom CTE\n\n)\n\n, \n\n----- Transofromation Heirarchy & Subsegment  --------------------\n----- we have upgraded billing grade in previous CTE  which is also used by BGG , create  BGG in this cte \n--30 columns \n--we are using this CTE to create the BGG column using billing grade\nCTE2 \nAS (\n    SELECT \n\t\ncategory,\nAccountID,\nMonthDate,\n[MemberGrade]\t,\nBranchGroup,\t\nGender\t,\ncertificationGroup\t,\nCertificationLevel,\n[PPP],\nAccountObjID,\n[Email]\t,\nAccountType\t,\nMembershipNumber,\nDateOfBirth__c\t,\nDays_since_Current_Membership_Expiry__c,\nPersonFullName\t,\nCurrentMembershipExpiry\t,\nJoinedDate\t,\nBranch\t,\nGeography,\nWorkCountry,\nHomeCountry\t,\nFormer_Billing_Grade1__c\t,\nMembership_Status,\nBillingGradeConcat,\nExtractDate\t,\n[FYYear]\t,\nFY\t,\nMonth, \nBillingGrade,\n\n\n\t\t--Codifying Billing grade into BGG from Account Object \n\t    CASE           \n\t\tWhen [BillingGrade] in ('0 - n/a', '1 - Continuing' , '12 - Complimentary','13 - Honoured', '16 - Unemployed / On Hiatus', '5 - Life Member')   Then 'Other'          \n\t\tWhen [BillingGrade] in ('10 - Student - PPP', '11 - Student', '15 - Student - ACSF', '15 – Student – ACSF')   then 'Student'          \n\t\tWhen [BillingGrade] in ('14 - Student - PYear', '14 – Student – PYear', '16 - Student - PYear', '17 - Student - PYear', '18 - Student - PYear') then 'Professional Year'          \n\t\tWhen [BillingGrade] in ('17 - PPP MOU2', '2 - PPP Full fee') then 'PPP'          \n\t\tWhen [BillingGrade] in ('19 - Subscriber - PPP') then 'Subscriber'          \n\t\tWhen [BillingGrade] in ('20 - Skills Applicant') then 'Overseas'          \n\t\tWhen [BillingGrade] in ('7 - Graduate - 2nd Year') then 'Graduate'          \n\t\tWhen [BillingGrade] in ('3 - Full Fee') then 'Full Fee'          \n\t\tWhen [BillingGrade] in ('8 - Retired') then 'Retired'          \n\t\telse NULL           \n\t\tend as [BGG]\n\n         from CTE1), \n\n\n--We create  Heirarchy based on MemberGrade & Billing Grade \n-- we Update Branch Group based on BGG again\n\n\n\t\tCTE3 as (\n\n\n\t\tselect \ncategory,\nAccountID,\nMonthDate,\n[MemberGrade]\t,\nGender\t,\ncertificationGroup\t,\nCertificationLevel,\n[PPP],\nAccountObjID,\n[Email]\t,\nAccountType\t,\nMembershipNumber,\nDateOfBirth__c\t,\nDays_since_Current_Membership_Expiry__c,\nPersonFullName\t,\nCurrentMembershipExpiry\t,\nJoinedDate\t,\nBranch\t,\nGeography,\nWorkCountry,\nHomeCountry\t,\nFormer_Billing_Grade1__c\t,\nMembership_Status,\nBillingGradeConcat,\nExtractDate\t,\n[FYYear]\t,\nFY\t,\nMonth, \nBillingGrade,\nBGG, \n\n\nCASE \nWhen BGG ='Overseas' THEN  'OS'\n       ELSE BranchGroup \n\t END  as BranchGroup , \n\n\n        CASE    \n            WHEN [MemberGrade] IN ('Member', 'Senior Member', 'Fellow', 'Honorary Fellow')\n\t\t\tTHEN 'Professional'    \n\n            WHEN [MemberGrade] IN ( 'Associate' )\n\t\t\t AND \n\t\t\t[BillingGrade] IN (    \n                '1 - Continuing', \n\t\t\t\t'3 - Full Fee', \n\t\t\t\t'5 - Life Member',    \n                '2 - PPP Full Fee',\n\t\t\t\t'3 - Full Fee',\n\t\t\t\t'17 - PPP MOU2',    \n                '8 - Retired'  \n            ) THEN 'Full Fee Associates'    \n\n            WHEN ( [MemberGrade] NOT IN ('Member', 'Senior Member', 'Fellow', 'Honorary Fellow', 'Subscriber', 'Honorary Member')    OR  [MemberGrade] in ('Associate') )\n                AND [BillingGrade] IN (    \n                    '4 - Graduate - 1st Year', \n\t\t\t\t\t'7 - Graduate - 2nd Year',    \n                    '10 - Student - PPP',\n\t\t\t\t\t'11 - Student',    \n                    '15 - Student - ACSF',\n\t\t\t\t\t'16 - Unemployed / On Hiatus'    \n                ) THEN 'Discounted (Full Benefits)'    \n\n            WHEN  ( [MemberGrade] NOT IN ('Member', 'Senior Member', 'Fellow', 'Honorary Fellow', 'Subscriber', 'Honorary Member')   OR  [MemberGrade] in ('Associate') )\n                AND [BillingGrade]\n\t\t\t\tIN ('20 - Skills Applicant') \n\t\t\t\tTHEN 'Skills Applicants'  \n\n            WHEN  ( [MemberGrade] NOT IN ('Member', 'Senior Member', 'Fellow', 'Honorary Fellow', 'Subscriber') OR  [MemberGrade] in ('Associate', 'Honorary Member') )\n\t\t\t                AND [BillingGrade] IN \n\t\t\t\t\t\t\t('11 - Complimentary', \n\t\t\t\t\t\t\t'12 - Complimentary', \n\t\t\t\t\t\t\t'13 - Honoured')\n\t\t\t\t\t\t\tTHEN 'Complimentary (Full Benefits)'  \n\n            WHEN  ( [MemberGrade] NOT IN ('Member', 'Senior Member', 'Fellow', 'Honorary Fellow', 'Subscriber', 'Honorary Member')  OR  [MemberGrade] in ('Associate') )\n                AND [BillingGrade] IN \n\t\t\t\t('14 - Student - PYear') \n\t\t\t\tTHEN 'Professional Year'  \n\n            WHEN  ([MemberGrade] NOT IN ('Member', 'Senior Member', 'Fellow', 'Honorary Fellow', 'Subscriber', 'Honorary Member')   OR  [MemberGrade] in ('Associate', 'Subscriber'))\n                AND [BillingGrade] IN (\n                    '18 - Digital Subscriber',\n\t\t\t\t\t'19 - Subscriber - PPP', \n\t\t\t\t\t'18 - Subscriber - PPP'    \n                ) THEN 'Subscribers (Discounted Limited Benefits)'\n            ELSE NULL -- Set Heirarchy to NULL if none of the conditions are met\n        END AS Heirarchy\n    FROM CTE2\n), \n\n\n\nCTE4\nAs (\n\nSELECT \n\ncategory,\nAccountID,\nMonthDate,\n[MemberGrade]\t,\nBranchGroup,\t\nGender\t,\ncertificationGroup\t,\nCertificationLevel,\n[PPP],\nAccountObjID,\n[Email]\t,\nAccountType\t,\nMembershipNumber,\nDateOfBirth__c\t,\nDays_since_Current_Membership_Expiry__c,\nPersonFullName\t,\nCurrentMembershipExpiry\t,\nJoinedDate\t,\nBranch\t,\nGeography,\nWorkCountry,\nHomeCountry\t,\nFormer_Billing_Grade1__c\t,\nMembership_Status,\nBillingGradeConcat,\nExtractDate\t,\n[FYYear]\t,\nFY\t,\nMonth, \nBillingGrade,\nBGG, \nHeirarchy, \n\n \n    CASE  \n\t--Professinal Segments\n        WHEN [Heirarchy] = 'Professional'\n\t\tAND\n\t\t[BillingGrade] NOT IN ('5 - Life Member', \n\t\t'13 - Honoured', \n\t\t'1 - Continuing', \n\t\t'8 - Retired', \n\t\t'3 - Full Fee',\n\t\t'2 - PPP Full Fee',\n\t\t'17 - PPP MOU2', \n\t\t'16 - PPP MOU2') \n\t\tTHEN 'Member, Senior Member, Fellow'  \n   \n        WHEN [Heirarchy] = 'Professional' \n\t\tAND\n\t\t[BillingGrade] \n\t\tIN \n\t\t('5 - Life Member', \n\t\t'13 - Honoured', \n\t\t'1 - Continuing') \n\t\tTHEN 'Life Members, Hon Members'        \n\n        WHEN [Heirarchy] = 'Professional'\n\t\tAND\n\t\t[BillingGrade] = '3 - Full Fee' \n\t\tTHEN 'Full Fee (Individual)'        \n\n        WHEN [Heirarchy] = 'Professional'\n\t\tAND\n\t\t[BillingGrade] IN (\n\t\t'2 - PPP Full Fee', \n\t\t'17 - PPP MOU2', \n\t\t'16 - PPP MOU2')\n\t\tTHEN 'Full Fee (PPP)'        \n\n        WHEN [Heirarchy] IN ( 'Professional', 'Full Fee Associates')\n\t\tAND \n\t\t[BillingGrade] = '8 - Retired' \n\t\tTHEN 'Retired'        \n  \n      --Full Fee Segments      \n        WHEN [Heirarchy] = 'Full Fee Associates' \n\t\tAND \n\t\t[BillingGrade] \n\t\tIN ('3 - Full Fee',\n\t\t'5 - Life Member',\n\t\t'1 - Continuing') \n\t\tTHEN 'Full Fee Associates (Individual)'  \n\t\t\n        WHEN [Heirarchy] = 'Full Fee Associates' \n\t\tAND \n\t\t[BillingGrade] \n\t\tIN ('2 - PPP Full Fee',\n\t\t'17 - PPP MOU2', \n\t\t'16 - PPP MOU2')\n\t\tTHEN 'Full Fee Associates (PPP)'        \n\n            \n\n\t   --Discounted \n              \n        WHEN [Heirarchy] = 'Discounted (Full Benefits)'\n\t\tAND\n\t\t[BillingGrade] IN\n\t\t('10 - Student - PPP',\n\t\t'11 - Student', \n\t\t'15 - Student - ACSF') \n\t\tTHEN 'Students'        \n\n        WHEN [Heirarchy] = 'Discounted (Full Benefits)'\n\t\tAND \n\t\t[BillingGrade] \n\t\tIN ('4 - Graduate - 1st Year',\n\t\t'7 - Graduate - 2nd Year')\n\t\tTHEN 'Graduate'        \n\n        WHEN [Heirarchy] = 'Discounted (Full Benefits)' \n\t\tAND \n\t\t[BillingGrade] = '16 - Unemployed / On Hiatus' \n\t\tTHEN 'Unemployed'   \n \n --Subscriber\n            \n        WHEN [Heirarchy] = 'Subscribers (Discounted Limited Benefits)'\n\t\tAND \n\t\t[BillingGrade] NOT IN\n\t\t('19 - Subscriber - PPP',\n\t\t'18 - Subscriber - PPP') \n\t\tTHEN 'Individuals'     \n\t\t\n        WHEN [Heirarchy] = 'Subscribers (Discounted Limited Benefits)'\n\t\tAND\n\t\t[BillingGrade] IN\n\t\t('19 - Subscriber - PPP', \n\t\t'18 - Subscriber - PPP')\n\t\tTHEN 'PPP'        \n\n        WHEN [Heirarchy] = 'Professional Year'\n\t\tTHEN 'Professional Year'        \n\n        WHEN [Heirarchy] = 'Complimentary (Full Benefits)' \n\t\tTHEN 'Complimentary'        \n\n        WHEN [Heirarchy] = 'Skills Applicants'\n\t\tTHEN 'Skills Applicants'        \n\n\t\t  WHEN [BGG] = 'Overseas' AND [Heirarchy] != 'Professional' \n\t\t  THEN 'Skills Applicants'  \n\n    END as subsegments\nFROM CTE3)\n\n\nselect * from CTE4\nOPTION (MAXRECURSION 0);",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"preCopyScript": {
							"value": "delete from membership.Mem_dashboard01\nwhere monthdate ='@{variables('date')}'\nand category ='Unfinancial Monthly'\n",
							"type": "Expression"
						},
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "category",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "category",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "AccountID",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AccountID",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "MonthDate",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "MonthDate",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "MemberGrade",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "MemberGrade",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "BranchGroup",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "BranchGroup",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "Gender",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Gender",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "certificationGroup",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "certificationGroup",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "CertificationLevel",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CertificationLevel",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "PPP",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "PPP",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "AccountObjID",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AccountObjID",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Email",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Email",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "AccountType",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AccountType",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "DateOfBirth__c",
									"type": "DateTime",
									"physicalType": "datetime2"
								},
								"sink": {
									"name": "DateOfBirth__c",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Days_since_Current_Membership_Expiry__c",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 18
								},
								"sink": {
									"name": "Days_since_Current_Membership_Expiry__c",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 18
								}
							},
							{
								"source": {
									"name": "PersonFullName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "PersonFullName",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "CurrentMembershipExpiry",
									"type": "DateTime",
									"physicalType": "datetime2"
								},
								"sink": {
									"name": "CurrentMembershipExpiry",
									"type": "DateTime",
									"physicalType": "datetime2"
								}
							},
							{
								"source": {
									"name": "JoinedDate",
									"type": "DateTime",
									"physicalType": "datetime2"
								},
								"sink": {
									"name": "JoinedDate",
									"type": "DateTime",
									"physicalType": "datetime2"
								}
							},
							{
								"source": {
									"name": "Branch",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Branch",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Geography",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Geography",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "WorkCountry",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "WorkCountry",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "HomeCountry",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "HomeCountry",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Former_Billing_Grade1__c",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Former_Billing_Grade1__c",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "BGG",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "BGG",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "BillingGradeConcat",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "BillingGradeConcat",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "ExtractDate",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "ExtractDate",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "FYYear",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "FYYear",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "FY",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "Month",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Month",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "BillingGrade",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "BillingGrade",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Heirarchy",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Heirarchy",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "subsegments",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "subsegments",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "Membership_Status",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Membership_Status",
									"type": "String",
									"physicalType": "varchar"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "AzureSQLSP",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "SQLTableQ",
						"type": "DatasetReference",
						"parameters": {
							"tablename": "Mem_dashboard01",
							"schemaname": "membership"
						}
					}
				]
			},
			{
				"name": "Set end of the month as Date",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "date",
					"value": {
						"value": "@formatDateTime(addDays(startOfMonth(addToTime(utcnow(), 0, 'Month')), -1), 'yyyy-MM-dd')",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"date": {
				"type": "String",
				"defaultValue": "'2025-05-31'"
			}
		},
		"folder": {
			"name": "ACS/Membership/Monthly"
		},
		"annotations": []
	}
}