{
	"name": "s3_Staging_To_Canonical_Bulk",
	"properties": {
		"activities": [
			{
				"name": "Log - Get staging items by correlation id",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Process staging data items",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[logging].[create_sys_log]",
					"storedProcedureParameters": {
						"base64_data": {
							"value": {
								"value": "@base64(string(activity('Process staging data items').output))",
								"type": "Expression"
							},
							"type": "String"
						},
						"context": {
							"value": {
								"value": "@{pipeline().Pipeline} -> Process staging data items by correlation_id",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"source_name": {
							"value": {
								"value": "Correlation ID: @{pipeline().parameters.CorrelationID}",
								"type": "Expression"
							},
							"type": "String"
						},
						"system_name": {
							"value": {
								"value": "@pipeline().parameters.Configuration.sourceSystemName",
								"type": "Expression"
							},
							"type": "String"
						},
						"target_name": {
							"value": {
								"value": "Canonical Tables",
								"type": "Expression"
							},
							"type": "String"
						},
						"type": {
							"value": {
								"value": "@if(equals(activity('Process staging data items').Status, 'Failed'), 'error', 'info')",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Validate picklist values",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Lookup Merged Cases",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[validate].[validate_picklists_values]",
						"storedProcedureParameters": {
							"correlation_id": {
								"type": "Guid",
								"value": {
									"value": "@pipeline().parameters.CorrelationID",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					}
				}
			},
			{
				"name": "Start Run",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[logging].[create_sys_run]",
						"storedProcedureParameters": {
							"base64_data": {
								"type": "String",
								"value": {
									"value": "@base64(string(pipeline().parameters.Configuration))",
									"type": "Expression"
								}
							},
							"context": {
								"type": "String",
								"value": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							},
							"run_id": {
								"type": "Guid",
								"value": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							},
							"system_name": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.Configuration.sourceSystemName",
									"type": "Expression"
								}
							},
							"type": {
								"type": "String",
								"value": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								}
							},
							"started": {
								"type": "Datetime",
								"value": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							},
							"correlation_id": {
								"type": "Guid",
								"value": {
									"value": "@pipeline().parameters.CorrelationID",
									"type": "Expression"
								}
							},
							"correlation_name": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.Configuration.templateName",
									"type": "Expression"
								}
							},
							"correlation_timestamp": {
								"type": "Datetime",
								"value": {
									"value": "@pipeline().parameters.CorrelationTimestamp",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					}
				}
			},
			{
				"name": "End Run",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Canonical to Salesforce",
						"dependencyConditions": [
							"Completed",
							"Skipped"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[logging].[update_sys_run]",
					"storedProcedureParameters": {
						"optional_data_sink_type": {
							"value": {
								"value": "@if(contains(pipeline().parameters.Configuration, 'optionalDataSinkType'), pipeline().parameters.Configuration.optionalDataSinkType, 'AzureSqlDatabase')",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"status": {
							"value": "Succeeded",
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Log - Validate picklist values",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Validate picklist values",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[logging].[create_sys_log]",
					"storedProcedureParameters": {
						"base64_data": {
							"value": {
								"value": "@base64(string(activity('Validate picklist values').output))",
								"type": "Expression"
							},
							"type": "String"
						},
						"context": {
							"value": {
								"value": "@{pipeline().Pipeline} -> Validate picklist values",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"source_name": {
							"value": null,
							"type": "String"
						},
						"system_name": {
							"value": {
								"value": "@pipeline().parameters.Configuration.sourceSystemName",
								"type": "Expression"
							},
							"type": "String"
						},
						"target_name": {
							"value": null,
							"type": "String"
						},
						"type": {
							"value": {
								"value": "@if(equals(activity('Validate picklist values').Status, 'Failed'), 'error', 'info')",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Process staging data items",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Delete Blank Rows",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[config].[stg_items_to_canonical]",
					"storedProcedureParameters": {
						"context": {
							"value": {
								"value": "@{pipeline().Pipeline} -> Process staging items by correlation id",
								"type": "Expression"
							},
							"type": "String"
						},
						"correlation_id": {
							"value": {
								"value": "@{pipeline().parameters.CorrelationID}",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"pipeline_name": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"system_name": {
							"value": {
								"value": "@pipeline().parameters.Configuration.sourceSystemName",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Canonical to Salesforce",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Validate picklist values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"waitOnCompletion": false,
					"parameters": {
						"CorrelationID": {
							"value": "@pipeline().parameters.CorrelationID",
							"type": "Expression"
						},
						"CorrelationTimestamp": {
							"value": "@pipeline().parameters.CorrelationTimestamp",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Lookup Merged Cases",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Process staging data items",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "declare @@merged_cases nvarchar(max) = (\nselect distinct l.CaseNumber, l.MergedCaseNumber from canonical.[Case] c \njoin app_trevi.merged_case_lookup l\non l.MergedCaseNumber=c.CaseNumber\nwhere c.dl_correlation_id = '@{pipeline().parameters.CorrelationID}'\nfor json path , without_array_wrapper\n)\n;\nupdate canonical.[Case] set CaseNumber=l.CaseNumber\nfrom canonical.[Case] c\njoin app_trevi.merged_case_lookup l\non l.MergedCaseNumber = c.CaseNumber \nand c.dl_correlation_id = '@{pipeline().parameters.CorrelationID}'\n;\nselect @@merged_cases as 'mergedCases';",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					}
				}
			},
			{
				"name": "Log - Lookup Merged Cases",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Lookup Merged Cases",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[logging].[create_sys_log]",
					"storedProcedureParameters": {
						"base64_data": {
							"value": {
								"value": "@base64(string(activity('Lookup Merged Cases').output))",
								"type": "Expression"
							},
							"type": "String"
						},
						"context": {
							"value": {
								"value": "@{pipeline().Pipeline} -> Lookup Merged Cases",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"source_name": {
							"value": {
								"value": "Correlation ID: @{pipeline().parameters.CorrelationID}",
								"type": "Expression"
							},
							"type": "String"
						},
						"system_name": {
							"value": {
								"value": "@pipeline().parameters.Configuration.sourceSystemName",
								"type": "Expression"
							},
							"type": "String"
						},
						"target_name": {
							"value": {
								"value": "Update Merged Cases",
								"type": "Expression"
							},
							"type": "String"
						},
						"type": {
							"value": {
								"value": "@if(equals(activity('Lookup Merged Cases').Status, 'Failed'), 'error', 'info')",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Delete Blank Rows",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Start Run",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "declare @@deleted_rows int =0,@@corr_id uniqueidentifier = '@{pipeline().parameters.CorrelationID}';\nwith j as (\nselect d.item_id, j.* from [stg].[file_data] d\ncross apply openjson(d.json_data) j\nwhere \nd.correlation_id = @@corr_id\n)\n,g as (\nselect j.item_id\n,max(case when nullif(j.value,'') is null then 0 else 1 end) as v\nfrom j\ngroup by j.item_id\n)\ndelete from [stg].[file_data] where exists (\nselect 1 from g where v = 0 and g.item_id=[stg].[file_data].item_id \n)\nand correlation_id =@@corr_id\n;\nset @@deleted_rows=@@ROWCOUNT;\nselect @@deleted_rows as [deleted_blank_rows]\n,@@deleted_rows as [rowsRead]\n,@@deleted_rows as [rowsCopied]\n,@@corr_id as  [correlationID]\n;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					}
				}
			},
			{
				"name": "Log - Delete Blank Rows Staging",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Delete Blank Rows",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[logging].[create_sys_log]",
					"storedProcedureParameters": {
						"base64_data": {
							"value": {
								"value": "@base64(string(activity('Delete Blank Rows').output.firstRow))",
								"type": "Expression"
							},
							"type": "String"
						},
						"context": {
							"value": {
								"value": "@{pipeline().Pipeline} -> Delete Blank Rows",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"source_name": {
							"value": {
								"value": "Correlation ID: @{pipeline().parameters.CorrelationID}",
								"type": "Expression"
							},
							"type": "String"
						},
						"system_name": {
							"value": {
								"value": "@pipeline().parameters.Configuration.sourceSystemName",
								"type": "Expression"
							},
							"type": "String"
						},
						"target_name": {
							"value": {
								"value": "@concat('Deleted blank rows ',activity('Delete Blank Rows').output.firstRow.deleted_blank_rows)",
								"type": "Expression"
							},
							"type": "String"
						},
						"type": {
							"value": {
								"value": "@if(equals(activity('Delete Blank Rows').Status, 'Failed'), 'error', 'info')",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Find Invalid Rows",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Process staging data items",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select \ncoalesce(sum(case status when 'Valid' then 1 else 0 end),-1) as valid_cnt\n,coalesce(sum(case status when 'Valid' then 0 else 1 end),-1) as invalid_cnt\n,max(template_name) as template_name\n,max(file_path) as file_path\n,max(file_name) as file_name\nfrom stg.file_data fd where correlation_id='@{pipeline().parameters.CorrelationID}'\nand exists (select 1 from stg.file_data fd where correlation_id ='@{pipeline().parameters.CorrelationID}'\nand status <> 'Valid'\n)\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					}
				}
			},
			{
				"name": "Check Successful Rows Count",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Find Invalid Rows",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('Find Invalid Rows').output.firstRow.valid_cnt,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy Failed File",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitOnCompletion": false,
								"parameters": {
									"correlation_id": {
										"value": "@pipeline().parameters.CorrelationID",
										"type": "Expression"
									},
									"sourceFilename": {
										"value": "@concat('processed/',activity('Find Invalid Rows').output.firstRow.file_name)",
										"type": "Expression"
									},
									"targetFilename": {
										"value": "@concat('exported-failures/',formatDateTime(pipeline().TriggerTime,'yyyyMMddHHmm'),'_',pipeline().parameters.CorrelationID,'_',activity('Find Invalid Rows').output.firstRow.file_name)",
										"type": "Expression"
									},
									"containerName": {
										"value": "@activity('Find Invalid Rows').output.firstRow.template_name",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Log - Find Invalid Rows",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Find Invalid Rows",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[logging].[create_sys_log]",
					"storedProcedureParameters": {
						"base64_data": {
							"value": {
								"value": "@base64(string(activity('Find Invalid Rows').output))",
								"type": "Expression"
							},
							"type": "String"
						},
						"context": {
							"value": {
								"value": "@{pipeline().Pipeline} -> Find Invalid Rows",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"source_name": {
							"value": {
								"value": "Correlation ID: @{pipeline().parameters.CorrelationID}",
								"type": "Expression"
							},
							"type": "String"
						},
						"system_name": {
							"value": {
								"value": "@pipeline().parameters.Configuration.sourceSystemName",
								"type": "Expression"
							},
							"type": "String"
						},
						"target_name": {
							"value": {
								"value": "Find Invalid Rows",
								"type": "Expression"
							},
							"type": "String"
						},
						"type": {
							"value": {
								"value": "@if(equals(activity('Find Invalid Rows').Status, 'Failed'), 'error', 'info')",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				}
			}
		],
		"parameters": {
			"CorrelationID": {
				"type": "string",
				"defaultValue": "5E1691E8-4505-4673-9481-015100491235"
			},
			"Configuration": {
				"type": "object",
				"defaultValue": {
					"configVersion": "1.0.1",
					"sourceSystemName": "Staging to Canonical [genesys-extract] DEV",
					"templateName": "genesys-extract"
				}
			},
			"CorrelationTimestamp": {
				"type": "string"
			}
		},
		"folder": {
			"name": "Core Bulk Data Load"
		},
		"annotations": []
	}
}